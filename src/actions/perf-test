#!/usr/local/sbin/charm-env python3

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import kafkautils
import subprocess

from charmhelpers.core import hookenv, host
from charms.reactive import is_state
from time import time

from charms.layer.kafka import KAFKA_SERVICE, KAFKA_APP_DATA, KAFKA_PORT


if not is_state('kafka.started'):
    kafkautils.fail('Kafka service not yet ready')


# Define smoke test params
# # Define smoke test params
perf_messsages = hookenv.action_get('messages')
record_size = hookenv.action_get('recordsize')
topic_name = hookenv.action_get('topic')
ssl_properties = os.path.join(KAFKA_APP_DATA, 'client-ssl.properties')
throughput = hookenv.action_get('messages')
topic_replication = 1
topic_partitions = 10


# Define smoke test params
perf_timeout = hookenv.action_get('timeout')

# Smoke only when kafka is running
if host.service_available(KAFKA_SERVICE) and host.service_running(KAFKA_SERVICE):
    host = subprocess.check_output(['hostname', '-s']).decode('utf8').strip()
    port = KAFKA_PORT

    # List ZKs
    zookeepers = kafkautils.get_zookeepers()
    if not zookeepers:
        kafkautils.fail('No zookeeper.connect string found')

    # test producer 
    try:
        output = subprocess.check_call(['/usr/bin/kafka-topics',
                        '--zookeeper', zookeepers, '--create',
                        '--topic', topic_name,
                        '--partitions', str(topic_partitions),
                        '--replication-factor', str(topic_replication)])
    except subprocess.CalledProcessError as e:
        kafkautils.fail('Kafka command failed: {}'.format(e.output))

    # test producer 
    try:
        output = subprocess.check_call(['/usr/lib/kafka/bin/kafka-producer-perf-test.sh',
                        '--record-size', str(record_size),
                        '--throughput', str(perf_messsages),
                        '--num-records', str(perf_messsages),
                        '--topic', topic_name,
                        '--producer.config', ssl_properties,
                        '--print-metrics'])
    except subprocess.CalledProcessError as e:
        kafkautils.fail('Kafka command failed: {}'.format(e.output))

    # Test Consumer
    try:
        output = subprocess.check_call(['/usr/lib/kafka/bin/kafka-consumer-perf-test.sh',
                        '--broker-list', '{}:{}'.format(host, port),
                        '--messages', str(perf_messsages),
                        '--topic', topic_name,
                        '--consumer.config', ssl_properties,
                        '--show-detailed-stats',
                        '--print-metrics'])
    except subprocess.CalledProcessError as e:
        kafkautils.fail('Kafka command failed: {}'.format(e.output))
