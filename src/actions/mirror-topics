#!/usr/local/sbin/charm-env python3

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import kafkautils
import subprocess

from charmhelpers.core import hookenv, host
from charms.reactive import is_state

from charms.layer.kafka import KAFKA_SERVICE


if not is_state('kafka.started'):
    kafkautils.fail('Kafka service not yet ready')


# Grab the business
producerconfig = json.loads(base64.b64decode(hookenv.action_get('producerconfig')).decode("utf-8"))
consumerconfig = json.loads(base64.b64decode(hookenv.action_get('consumerconfig')).decode("utf-8"))
with open('/tmp/producerconfig-file', 'w') as outfile:
    json.dump(producerconfig, outfile)
with open('/tmp/consumerconfig-file', 'w') as outfile:
    json.dump(consumerconfig, outfile)

# mirror the topics if kafka is running
if host.service_available(KAFKA_SERVICE) and host.service_running(KAFKA_SERVICE):
    try:
        output = subprocess.check_output(['/usr/lib/kafka/bin/kafka-mirror-maker.sh',
                              '--producer.config', producerconfig,
                              '--consumer.config', consumerconfig,
                              '--num.streams', '3',
                              '--whitelist', ".*"])
    except subprocess.CalledProcessError as e:
        kafkautils.fail('Kafka command failed: {}'.format(e.output))
    else:
        hookenv.action_set({'raw': output})
        hookenv.action_set({'outcome': 'success'})
else:
    kafkautils.fail('kafka-server service is not running')
